---------------------------------------------------------------
-- DROP ALL TABLES AND SEQUENCES

BEGIN

FOR i IN (SELECT us.sequence_name FROM USER_SEQUENCES us) LOOP
    EXECUTE IMMEDIATE 'drop sequence '|| i.sequence_name ||'';
END LOOP;

FOR i IN (SELECT ut.table_name FROM USER_TABLES ut) LOOP
    EXECUTE IMMEDIATE 'drop table '|| i.table_name ||' CASCADE CONSTRAINTS ';
END LOOP;

END;

---------------------------------------------------------------
-- CREATE SEQUENCES

CREATE SEQUENCE DEPARTMENTS_SEQ START WITH 1;
CREATE SEQUENCE EMPLOYEES_SEQ START WITH 1;
CREATE SEQUENCE JOBS_SEQ START WITH 1;

---------------------------------------------------------------
-- CREATE TABLE JOBS

CREATE TABLE JOBS 
(
  JOB_ID NUMBER(4,0) NOT NULL 
, JOB_TITLE NVARCHAR2(50) NOT NULL 
, MIN_SALARY NUMBER(8,2) 
, MAX_SALARY NUMBER(8,2)
, CREATED_AT TIMESTAMP default systimestamp
, UPDATED_AT TIMESTAMP default systimestamp 
, CONSTRAINT JOBS_PK PRIMARY KEY 
  (
    JOB_ID 
  )
  ENABLE 
);

---------------------------------------------------------------
-- CREATE TABLE EMPLOYEES

CREATE TABLE EMPLOYEES 
(
  EMPLOYEE_ID NUMBER(7,0) NOT NULL 
, FIRST_NAME NVARCHAR2(25) 
, LAST_NAME NVARCHAR2(25) NOT NULL 
, EMAIL VARCHAR2(50) NOT NULL 
, PHONE NUMBER 
, HIRE_DATE DATE default sysdate
, JOB_ID NUMBER NOT NULL 
, SALARY NUMBER(8,2)
, MANAGER_ID NUMBER(5,0)
, DEPARTMENT_ID NUMBER(3,0) NOT NULL 
, CREATED_AT TIMESTAMP default systimestamp
, UPDATED_AT TIMESTAMP default systimestamp
, CONSTRAINT EMPLOYEES_PK PRIMARY KEY 
  (
    EMPLOYEE_ID 
  )
  ENABLE 
);

---------------------------------------------------------------
-- CREATE TABLE DEPARTMENNTS

CREATE TABLE DEPARTMENTS 
(
  DEPARTMENT_ID NUMBER(3,0) NOT NULL 
, DEPARTMENT_NAME NVARCHAR2(50) NOT NULL 
, MANAGER_ID NUMBER(7,0) NOT NULL 
, CREATED_AT TIMESTAMP DEFAULT systimestamp 
, UPDATED_AT TIMESTAMP DEFAULT systimestamp 
, CONSTRAINT DEPARTMENTS_PK PRIMARY KEY 
  (
    DEPARTMENT_ID 
  )
  ENABLE 
);

---------------------------------------------------------------
-- CREATE TRIGGER JOBS

CREATE OR REPLACE TRIGGER JOBS_BEFORE_INSERT 
BEFORE INSERT ON JOBS 
FOR EACH ROW
BEGIN
  IF :NEW.JOB_ID IS NULL THEN
    SELECT JOBS_SEQ.NEXTVAL INTO :NEW.JOB_ID FROM DUAL;
  END IF;
END;

---------------------------------------------------------------
-- CREATE TRIGGER EMPLOYEES

CREATE OR REPLACE TRIGGER EMPLOYEES_BEFORE_INSERT 
BEFORE INSERT ON EMPLOYEES 
FOR EACH ROW
BEGIN
 	IF :NEW.EMPLOYEE_ID IS NULL THEN
    SELECT EMPLOYEES_SEQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
	END IF;
END;

---------------------------------------------------------------
-- CREATE TRIGGER DEPARTMENTS

CREATE OR REPLACE TRIGGER DEPARTMENTS_BEFORE_INSERT 
BEFORE INSERT ON DEPARTMENTS 
FOR EACH ROW
BEGIN
 	IF :NEW.DEPARTMENT_ID IS NULL THEN
    SELECT DEPARTMENTS_SEQ.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
	END IF;
END;

---------------------------------------------------------------
-- ALTER TABLE EMPLOYEES

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_EMAIL_UK UNIQUE 
(
  EMAIL 
)
ENABLE;


ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_DEPARTMENT_FK FOREIGN KEY
(
  DEPARTMENT_ID 
)
REFERENCES DEPARTMENTS
(
  DEPARTMENT_ID 
)
ON DELETE SET NULL ENABLE;


ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_JOB_FK FOREIGN KEY
(
  JOB_ID 
)
REFERENCES JOBS
(
  JOB_ID 
)
ON DELETE SET NULL ENABLE;

